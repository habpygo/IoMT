/*
Copyright 2018 Harry Boer - DappDevelopment.com
Licensed under the MIT License, see LICENCE file for details.
*/

package main

import (
	"crypto/sha256"
	"fmt"
	"iota/merklemamgiota/merkletree"
	"os/exec"
	"runtime"
)

func open(url string) error {
	var cmd string
	var args []string

	switch runtime.GOOS {
	case "windows":
		cmd = "cmd"
		args = []string{"/c", "start"}
	case "darwin":
		cmd = "open"
	default: // "linux", "freebsd", "openbsd", "netbsd"
		cmd = "xdg-open"
	}
	args = append(args, url)
	return exec.Command(cmd, args...).Start()
}

type TestMessage struct {
	x string
}

// The two implementations
func (test TestMessage) CheckSum() []byte {
	h := sha256.New()
	h.Write([]byte(test.x))
	return h.Sum(nil)
}

func (test TestMessage) Equals(other merkletree.Message) bool {
	return test.x == other.(TestMessage).x
}

func main() {
	//Build list of Content to build tree
	var list []merkletree.Message
	list = append(list, TestMessage{x: "0: Hello there"}) //0
	list = append(list, TestMessage{x: "1: Everything OK?"})
	list = append(list, TestMessage{x: "2: Hey girl"}) //2
	list = append(list, TestMessage{x: "3: Hola Gopher"})
	list = append(list, TestMessage{x: "4: He, what the hell is going on here?"})                     //4
	list = append(list, TestMessage{x: "5: Nobody knows."})                                           //5
	list = append(list, TestMessage{x: "6: We have to wait a bit longer, but one day IOTA will ..."}) //6
	list = append(list, TestMessage{x: "7: What fantastic prose here."})                              //7

	var fakeList []merkletree.Message
	fakeList = append(fakeList, TestMessage{x: "I'm a hacker; I like hacking you"})

	// 1. Create a new Merkle Tree from the list of Content
	testTree, _ := merkletree.NewTree(list)

	// 2. With the obtained Merkle Tree, get the Merkle Root of the tree
	mr := testTree.MerkleRootHash()
	fmt.Println("The MerkleRoot is: ", mr)

	// 3. Check that the entire tree (hashes for each node) is valid
	ct := testTree.CheckMerkleTree()
	fmt.Println("Authentication of Tree is: ", ct)

	// 4. Check for a specific content in in the tree
	am := testTree.CheckIfContentIsAuthentic(testTree.MerkleRootHash(), list[0])
	fmt.Println("Check if the message is authentic: ", list[0], "is ", am)
	am = testTree.CheckIfContentIsAuthentic(testTree.MerkleRootHash(), list[3])
	fmt.Println("Check if the message is authentic: ", list[3], "is ", am)

	// 5. Test for falsehood
	am = testTree.CheckIfContentIsAuthentic(testTree.MerkleRootHash(), fakeList[0])
	fmt.Println("Check if the message is authentic: ", fakeList[0], "is ", am)

	//l := len(list)
	//fmt.Println("length of list is: ", l, "and node content of last leaf is: ", testTree.Leafs[l-1].M)
	//fmt.Println("Done with Merkle Tree testing.")

	// msgwebpage := &controllers.MAMBoardSetup{}
	// fmt.Println("We enter main()")

	// //open a new webpage...
	// open("http://localhost:3000/")
	// //...and serve it the MAMBoard
	// web.Serve(msgwebpage)

}
